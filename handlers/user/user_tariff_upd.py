from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger
import aiosqlite
import os
from datetime import datetime, timedelta
from handlers.database import db

from handlers.x_ui import xui_manager
from handlers.user.user_kb import get_subscriptions_keyboard, get_success_by_keyboard
from handlers.yookassa import yookassa_manager
from asyncio import Lock

async def send_renewal_notification_to_admin(bot, user_id, username, tariff_days, tariff_info, payment_method):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        bot_settings = await db.get_bot_settings()
        if not bot_settings or not bot_settings.get('admin_id'):
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        admin_ids = bot_settings['admin_id']
        username = username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        
        if tariff_info:
            try:
                tariff_name = str(tariff_info['name'])
                server_name = str(tariff_info['server_name'])
                tariff_price = str(tariff_info['price'])
            except (KeyError, IndexError):
                tariff_name, server_name, tariff_price = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        else:
            tariff_name, server_name, tariff_price = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            
        days_text = str(tariff_days) if tariff_days is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        price_text = str(tariff_price) if tariff_price is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        message = (
            "‚úÖ <b>–ù–æ–≤–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code> (@{username})\n"
            f"<blockquote><b>üìù –¢–∞—Ä–∏—Ñ:</b> {tariff_name}\n"
            f"<b>üåê –°–µ—Ä–≤–µ—Ä:</b> {server_name}\n"
            f"<b>üìÖ –ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞:</b> {days_text} –¥–Ω–µ–π\n"
            f"<b>üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_method}\n"
            f"<b>üí∞ –°—É–º–º–∞:</b> {price_text} —Ä—É–±.\n"
            f"<b>üïí –í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</blockquote>"
        )
        
        for admin_id in admin_ids:
            try:
                await bot.send_message(int(admin_id), message, parse_mode="HTML")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏: {e}")

router = Router()

payment_locks = {}

async def extend_subscription_in_xui(server_settings, vless_link, new_end_date):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ X-UI —Å –ø–æ–∏—Å–∫–æ–º –ø–æ email –≤–æ –≤—Å–µ—Ö inbound"""
    try:
        client = await xui_manager.get_client(server_settings)
        if not client:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_settings['id']}")
            return False

        inbounds = client.inbound.get_list()
        
        client_id = vless_link.split('://')[1].split('@')[0]
        email = vless_link.split('#')[1] if '#' in vless_link else None
        
        logger.info(f"–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞: client_id={client_id}, email={email}")
        
        target_client = None
        target_inbound = None
        
        # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        for inbound in inbounds:
            if hasattr(inbound, 'settings') and hasattr(inbound.settings, 'clients'):
                clients = inbound.settings.clients
                found = next((c for c in clients if c.id == client_id), None)
                if found:
                    target_client, target_inbound = found, inbound
                    logger.info(f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ ID {client_id} –≤ inbound {inbound.id}")
                    break
                if email:
                    found = next((c for c in clients if hasattr(c, 'email') and c.email == email), None)
                    if found:
                        target_client, target_inbound = found, inbound
                        logger.info(f"–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ email {email} –≤ inbound {inbound.id}")
                        break
        
        if not target_client:
            logger.error(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ ID {client_id}, –Ω–∏ –ø–æ email {email} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_settings['id']}")
            
            # --- –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î ---
            logger.warning("--- –ù–ê–ß–ê–õ–û –°–ü–ò–°–ö–ê –ö–õ–ò–ï–ù–¢–û–í –ù–ê –°–ï–†–í–ï–†–ï (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ---")
            any_client_found = False
            for i, inbound in enumerate(inbounds):
                if hasattr(inbound, 'settings') and hasattr(inbound.settings, 'clients'):
                    clients_in_inbound = inbound.settings.clients
                    if clients_in_inbound:
                        any_client_found = True
                        logger.info(f"–ö–ª–∏–µ–Ω—Ç—ã –≤ Inbound ID: {inbound.id}")
                        for c in clients_in_inbound:
                            logger.info(f"  -> ID: {c.id}, Email: {getattr(c, 'email', 'N/A')}")
            if not any_client_found:
                logger.warning("–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º inbound.")
            logger.warning("--- –ö–û–ù–ï–¶ –°–ü–ò–°–ö–ê –ö–õ–ò–ï–ù–¢–û–í –ù–ê –°–ï–†–í–ï–†–ï ---")
            # --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ---

            return False
        
        new_expiry = int(new_end_date.timestamp() * 1000)
        
        target_client.expiry_time = new_expiry
        
        try:
            client.client.update(target_client.id, target_client)
            logger.info(f"–ö–ª–∏–µ–Ω—Ç {getattr(target_client, 'email', target_client.id)} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ inbound {target_inbound.id}. –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {new_end_date}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ client.client.update –¥–ª—è {target_client.id}: {e}")
            return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ X-UI: {e}")
        return False

class RenewSubscriptionStates(StatesGroup):
    waiting_for_subscription_selection = State()
    waiting_for_tariff_selection = State()
    waiting_for_payment = State()

@router.callback_query(F.data == "renew_subscription")
async def process_renew_subscription(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await callback.message.delete()
        
        time_threshold = datetime.now() + timedelta(minutes=15)
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("""
                SELECT 
                    us.*,
                    s.name as server_name,
                    CAST((julianday(us.end_date) - julianday('now', 'localtime')) * 86400 AS INTEGER) as seconds_left
                FROM user_subscription us
                JOIN server_settings s ON us.server_id = s.id
                WHERE us.user_id = ? AND us.is_active = 1 AND us.end_date > ?
                ORDER BY us.end_date DESC
            """, (callback.from_user.id, time_threshold.strftime('%Y-%m-%d %H:%M:%S'))) as cursor:
                subscriptions = await cursor.fetchall()
        
        if not subscriptions:
            await callback.message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.",
                reply_markup=get_subscriptions_keyboard()
            )
            return
        
        if len(subscriptions) == 1:
            await state.update_data(subscription_id=subscriptions[0]['id'],
                                    server_id=subscriptions[0]['server_id'],
                                    vless=subscriptions[0]['vless'],
                                    end_date=subscriptions[0]['end_date'])
            await show_tariffs_for_renewal(callback, state)
            return
        
        keyboard = InlineKeyboardBuilder()
        
        for sub in subscriptions:
            total_seconds = sub['seconds_left'] if sub['seconds_left'] > 0 else 0

            time_str = ''
            if total_seconds >= 86400:
                days = total_seconds // 86400
                hours = (total_seconds % 86400) // 3600
                time_str = f"{days}–¥ {hours}—á"
            elif total_seconds >= 3600:
                hours = total_seconds // 3600
                minutes = (total_seconds % 3600) // 60
                time_str = f"{hours}—á {minutes}–º"
            else:
                minutes = total_seconds // 60
                seconds = total_seconds % 60
                time_str = f"{minutes}–º {seconds}—Å"
            
            server_name = sub['server_name']
            server_flag = server_name.split(' ')[-1] if ' ' in server_name else server_name
            
            vless_link = sub['vless']
            key_id = ''
            if '@' in vless_link:
                key_id = '@' + vless_link.split('@')[-1]
            
            button_text = f"{server_flag} | {time_str} | {key_id}"
            keyboard.button(text=button_text, callback_data=f"select_subscription_for_renewal:{sub['id']}")
        
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_my_subscriptions")
        keyboard.adjust(1)
        
        message_data = await db.get_bot_message('usd_tariff_user')
        
        if message_data and message_data['image_path'] and os.path.exists(message_data['image_path']):
            await callback.message.answer_photo(
                photo=FSInputFile(message_data['image_path']),
                caption=message_data['text'],
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
        else:
            text = message_data['text'] if message_data else "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:"
            await callback.message.answer(text=text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        
        await state.set_state(RenewSubscriptionStates.waiting_for_subscription_selection)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_subscriptions_keyboard())

@router.callback_query(F.data.startswith("select_subscription_for_renewal:"))
async def process_subscription_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    try:
        await callback.message.delete()
        subscription_id = int(callback.data.split(":")[1])
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("SELECT * FROM user_subscription WHERE id = ? AND is_active = 1", (subscription_id,)) as cursor:
                subscription = await cursor.fetchone()
        
        if not subscription:
            await callback.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=get_subscriptions_keyboard())
            return
        
        await state.update_data(subscription_id=subscription_id,
                                server_id=subscription['server_id'],
                                vless=subscription['vless'],
                                end_date=subscription['end_date'])
        
        await show_tariffs_for_renewal(callback, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_subscriptions_keyboard())

async def show_tariffs_for_renewal(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        data = await state.get_data()
        server_id = data.get('server_id')
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("SELECT * FROM server_settings WHERE id = ?", (server_id,)) as cursor:
                server = await cursor.fetchone()
            async with conn.execute("SELECT * FROM tariff WHERE server_id = ? AND is_enable = 1 ORDER BY left_day", (server_id,)) as cursor:
                tariffs = await cursor.fetchall()

        if not server or not tariffs:
            await callback.message.answer("–°–µ—Ä–≤–µ—Ä –∏–ª–∏ —Ç–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_subscriptions_keyboard())
            return
        
        await state.set_state(RenewSubscriptionStates.waiting_for_tariff_selection)
        
        server_name = server['name']
        server_flag = server_name.split(' ')[-1] if ' ' in server_name else server_name
        text = f"üåç –°–µ—Ä–≤–µ—Ä: {server_flag}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n\n"
        
        for tariff in tariffs:
            text += (f"<blockquote><b>–¢–∞—Ä–∏—Ñ:</b> {tariff['name']}\n"
                     f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff['description']}\n"
                     f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff['price']} —Ä—É–±.\n"
                     f"<b>–°—Ä–æ–∫:</b> {tariff['left_day']} –¥–Ω–µ–π</blockquote>")
        
        keyboard = InlineKeyboardBuilder()
        for tariff in tariffs:
            keyboard.button(text=f"{tariff['name']} - {tariff['price']} ‚ÇΩ", callback_data=f"renew_tariff:{tariff['id']}")
        
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="lk_my_subscriptions")
        keyboard.adjust(2, 2, 1)
        
        await callback.message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_subscriptions_keyboard())

@router.callback_query(F.data.startswith("renew_tariff:"), RenewSubscriptionStates.waiting_for_tariff_selection)
async def process_renew_tariff_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    try:
        await callback.message.delete()
        tariff_id = int(callback.data.split(":")[1])
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("SELECT * FROM tariff WHERE id = ?", (tariff_id,)) as cursor:
                tariff = await cursor.fetchone()
        
        if not tariff:
            await callback.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_subscriptions_keyboard())
            return
        
        await state.update_data(tariff_id=tariff_id,
                                tariff_days=tariff['left_day'],
                                tariff_price=tariff['price'])
        
        await show_payment_menu_for_renewal(callback, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_subscriptions_keyboard())

async def show_payment_menu_for_renewal(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        data = await state.get_data()
        tariff_id = data.get('tariff_id')
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("SELECT t.*, s.name as server_name FROM tariff t JOIN server_settings s ON t.server_id = s.id WHERE t.id = ?", (tariff_id,)) as cursor:
                tariff = await cursor.fetchone()
        
        if not tariff:
            await callback.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_subscriptions_keyboard())
            return
        
        await state.set_state(RenewSubscriptionStates.waiting_for_payment)
        
        server_name = tariff['server_name']
        server_flag = server_name.split(' ')[-1] if ' ' in server_name else server_name
        message_text = (f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
                        f"<blockquote><b>–¢–∞—Ä–∏—Ñ:</b> {tariff['name']}\n"
                        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tariff['description']}\n"
                        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {tariff['price']} —Ä—É–±.\n"
                        f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {server_flag}\n"
                        f"<b>–°—Ä–æ–∫:</b> {tariff['left_day']} –¥–Ω–µ–π.</blockquote>")
        
        keyboard = InlineKeyboardBuilder()
        if await db.is_yookassa_enabled():
            keyboard.button(text="üîµ –ö–∞—Ä—Ç—ã –†–§/–°–ë–ü", callback_data=f"renew_pay_yookassa:{tariff['price']}")
        
        keyboard.button(text="üí≤ –° –±–∞–ª–∞–Ω—Å–∞", callback_data=f"renew_pay_balance:{tariff['price']}")
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="lk_my_subscriptions")
        keyboard.adjust(2, 1)
        
        await callback.message.answer(message_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_subscriptions_keyboard())

@router.callback_query(F.data.startswith("renew_pay_balance:"), RenewSubscriptionStates.waiting_for_payment)
async def process_renew_pay_balance(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await callback.message.delete()
        
        data = await state.get_data()
        tariff_price = data.get('tariff_price')
        tariff_days = data.get('tariff_days')
        
        user_balance = await db.get_user_balance(callback.from_user.id)
        
        if user_balance < tariff_price:
            await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=get_subscriptions_keyboard())
            return
        
        await db.update_balance(callback.from_user.id, -tariff_price, "renewal", f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {tariff_days} –¥–Ω–µ–π")
        await state.update_data(payment_method="–ë–∞–ª–∞–Ω—Å")
        await process_subscription_renewal(callback, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_subscriptions_keyboard())

@router.callback_query(F.data.startswith("renew_pay_yookassa:"), RenewSubscriptionStates.waiting_for_payment)
async def process_renew_pay_yookassa(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await callback.message.delete()
        
        data = await state.get_data()
        tariff_price = data.get('tariff_price')
        tariff_days = data.get('tariff_days')
        
        payment_result = await yookassa_manager.create_payment(
            amount=tariff_price,
            description=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {tariff_days} –¥–Ω–µ–π (ID: {callback.from_user.id})",
            user_id=str(callback.from_user.id),
            username=callback.from_user.username,
            name_account=callback.from_user.full_name
        )
        
        if not payment_result or not payment_result[0] or not payment_result[1]:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂.", reply_markup=get_subscriptions_keyboard())
            return
        
        payment_id, payment_url = payment_result
        await state.update_data(payment_id=payment_id)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
        keyboard.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"renew_check_payment:{payment_id}")
        keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="lk_my_subscriptions")
        keyboard.adjust(1)
        
        await callback.message.answer(
            "üí≥ *–í–∞—à —Å—á–µ—Ç –≥–æ—Ç–æ–≤!*\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ *¬´üí∞–û–ø–ª–∞—Ç–∏—Ç—å¬ª*\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ *¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª*",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –Æ–ö–∞—Å—Å–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_subscriptions_keyboard())

@router.callback_query(F.data.startswith("renew_check_payment:"))
async def process_renew_check_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        payment_id = callback.data.split(":")[1]
        payment_status = await yookassa_manager.check_payment(payment_id)
        
        if not payment_status:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"renew_check_payment:{payment_id}")
            keyboard.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="lk_my_subscriptions")
            keyboard.adjust(1)
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª.", show_alert=True)
            return
        
        await callback.message.delete()
        await state.update_data(payment_method="–Æ–ö–∞—Å—Å–∞")
        await process_subscription_renewal(callback, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_subscriptions_keyboard())

async def process_subscription_renewal(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    try:
        data = await state.get_data()
        tariff_days = data.get('tariff_days')
        subscription_id = data.get('subscription_id')
        vless = data.get('vless')
        server_id = data.get('server_id')
        end_date_str = data.get('end_date')
        
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("SELECT * FROM server_settings WHERE id = ?", (server_id,)) as cursor:
                server = await cursor.fetchone()
        
        if not server:
            await callback.message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_subscriptions_keyboard())
            return
        
        end_date = datetime.fromisoformat(end_date_str.replace('Z', '+00:00'))
        
        current_time = datetime.now()
        if end_date < current_time:
            end_date = current_time
        
        new_end_date = end_date + timedelta(days=tariff_days)
        
        server_settings = dict(server)
        success = await extend_subscription_in_xui(server_settings, vless, new_end_date)
        
        if not success:
            await callback.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ X-UI. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_subscriptions_keyboard()
            )
            return
        
        async with aiosqlite.connect(db.db_path) as conn:
            await conn.execute("UPDATE user_subscription SET end_date = ?, is_active = 1 WHERE id = ?",
                               (new_end_date.strftime('%Y-%m-%d %H:%M:%S'), subscription_id))
            await conn.commit()
        
        tariff_id = data.get('tariff_id')
        async with aiosqlite.connect(db.db_path) as conn:
            conn.row_factory = aiosqlite.Row
            async with conn.execute("SELECT t.*, s.name as server_name FROM tariff t JOIN server_settings s ON t.server_id = s.id WHERE t.id = ?", (tariff_id,)) as cursor:
                tariff_info = await cursor.fetchone()
        
        payment_method = data.get('payment_method', '–ë–∞–ª–∞–Ω—Å')
        
        await send_renewal_notification_to_admin(
            callback.bot, 
            callback.from_user.id, 
            callback.from_user.username, 
            tariff_days, 
            tariff_info, 
            payment_method
        )
        
        success_message = (
            "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n"
            f"<blockquote>üìÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {new_end_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è∞ <b>–ü—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞:</b> {tariff_days} –¥–Ω–µ–π\n"
        )
        
        if tariff_info:
            success_message += (
                f"üì¶ <b>–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b> {tariff_info['name']}\n"
                f"üåç <b>–°–µ—Ä–≤–µ—Ä:</b> {tariff_info['server_name']}\n"
            )
        
        success_message += "</blockquote>\n\n‚ú® –í–∞—à VPN-–¥–æ—Å—Ç—É–ø —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!"
        
        await callback.message.answer(success_message, reply_markup=get_success_by_keyboard(), parse_mode="HTML")
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=get_subscriptions_keyboard())